(*
open IO
open Network
*)

priority stat_p
priority accept_p
priority serve_p

order stat_p < accept_p
order accept_p < serve_p

fairness stat_p 1
fairness accept_p 1
fairness serve_p 1


type stat = {page : string,
             views : int}

val localhost =
    case NetHostDB.getByName "localhost" (* (NetHostDB.getHostName ()) *) of
        NONE => (print "no host name?\n"; OS.Process.exit OS.Process.failure)
      | SOME addr => NetHostDB.addr addr
val sock = INetSock.TCP.socket ()
val socks = ref (cons((fn () => Socket.close sock), nil))
fun addtosocks s =
    MLton.Thread.atomically
        (fn () => upd (socks, cons ((fn () => Socket.close s),(!socks))))
val _ = OS.Process.atExit (fn () => List.app (fn f => f ()) (!socks))

val addr = INetSock.toAddr (localhost, 8000)
val _ = Socket.Ctl.setREUSEADDR (sock, true)
val _ = Socket.bind (sock, addr)
val _ = Socket.listen (sock, 1)

val reqbuf = ref nil
val stats = ref nil

(* Sequential base case for fib *)
fun seqfib n =
    if le (n, 1) then 1
    else let val (r1, r2) = (seqfib (minus (n, 1)), seqfib (minus (n, 2)))
         in plus (r1, r2)
         end

(* Priority-polymorphic parallel fib *)
fun[w] fib n =
         let fun fib_int n : int cmd[w] =
                 if le (n, 1) then cmd[w] {ret 1}
                 else if le (n, 20) then cmd[w] {ret (seqfib n)}
                 else
                     cmd[w]
                        { bt <- spawn[w] {do (fib_int (minus (n, 1)))};
                          a <- do (fib_int (minus (n, 2)));
                          b <- sync bt;
                          plus (a, b)}
         in
             cmd[w]
             {
               f <- do (fib_int n);
               print (cat (Int.toString f, "\n"))
             }
         end

fun statloop () =
    let fun update_stats (r, ss) =
            if List.exists (fn {page, views} => eq (page, r)) ss then
                List.map (fn {page, views} =>
                             if eq (page, r) then
                                 {page = page, views = plus (views, 1)}
                             else
                                 {page = page, views = views})
                     ss
            else
                cons ({page = r, views = 1}, ss)
        fun comp_stats rs ss =
            List.foldl update_stats ss rs
        val reqs = !reqbuf
        val stats' = comp_stats reqs nil
    in
        upd (stats, stats');
        cmd[stat_p]
           { ret ([stat_p]fib 42);
             do (statloop ())
           }
    end

fun parse_request s =
    let val tokens = String.tokens Char.isSpace s in
        (* case tokens of
            rt::url::httpv::rest => *)
            (let val urltokens = String.tokens (fn c => eq (c, ?\\)) (List.nth (tokens, 1)) in
                 SOME (List.nth (urltokens, minus (List.length urltokens, 1)))
             end)
            handle Subscript => NONE
          (* | _ => NONE *)
    end

(*
fun build_success s =
    "HTTP/1.0 200 OK\r\n" ^
    "Date: " ^
    (Date.fmt "%a, %d %b %Y %H:%M:%S %Z"
              (Date.fromTimeLocal (Time.now ()))) ^ "\r\n" ^
    "Content-Type: text/html\r\n" ^
    "Content-Length: " ^ (Int.toString (String.size s)) ^ "\r\n\r\n" ^
    s
*)

fun build_success s =
    cons ("HTTP/1.0 200 OK",
          cons(cat ("Date: ",
                    (Date.fmt "%a, %d %b %Y %H:%M:%S %Z"
                              (Date.fromTimeLocal (Time.now ())))),
               cons("Content-Type: text/html", cons(
     cat ("Content-Length: ", (Int.toString (String.size s))),
     cons("",
     cons(s, nil))))))


fun build_inv_req () =
    cons ("HTTP/1.0 400 Bad Request", nil)

fun build_404 () =
    cons ("HTTP/1.0 404 Not Found", nil)

val dummy_page =
    "<html><head><title>Dummy page</title></head><body>Hi!</body></html>"

fun build_stat_page () =
    let fun build_row {page, views} =
            cat ("<tr><td>", cat (page, cat ("</td><td>", cat(Int.toString views,
            "</td></tr>\n"))))
    in
        cat ("<html><head><title>Server Statistics</title></head>\n",
        cat ("<body>\n",
        cat ("<h1>Server statistics</h1>\n", (* as of " ^
        (Date.fmt "%a, %d %b %Y %H:%M:%S %Z"
                  (Date.fromTimeLocal (Time.now ()))) ^ "</h1>\n" ^ *)
        cat ("<table border=1>\n",
        cat ("<tr><td>Page</td><td>Views</tr>\n",
        cat ((List.foldl cat "" (List.map build_row (!stats))),
        cat ("</table>",
        "</body></html>")))))))
    end

(* Stolen from Tom Murphy VII's StringUtil *)
fun readfile f =
    (let
        val l = TextIO.openIn f
        val s = TextIO.inputAll l
    in
        TextIO.closeIn l; SOME s
    end)
    handle _ => NONE

fun sendLine sock ln =
    (IO.Network.sendString (sock, ln);
     ignore (IO.Network.sendString (sock, "\r\n")))

fun inploop sock =
    let val _ = print "receiving\n"
        val req = (IO.Network.recvString (sock, 1024))
        val _ = print "received\n"
        val _ = print (cat (req, "\n"))
     in
         if eq (String.size req, 0) then
             (Socket.close sock; ())
         else
             let val response =
                 case parse_request req of
                     SOME filename =>
                     (upd (reqbuf, cons (filename, !reqbuf));
                      (* print ("Requested: " ^ filename ^ "\n"); *)
                     if String.isSubstring "stats.html" filename then
                         build_success (build_stat_page ())
                     else
                         (case readfile (cat ("www", filename)) of
                              SOME s => build_success s
                            | NONE => build_404 ()))
                   | NONE => build_inv_req ()
             in
                 print "sending\n";
                 (* print (response ^ "\n"); *)
                 List.app (sendLine sock) response;
                 print "sent\n";
                 Socket.close sock
                 (* inploop sock *)
             end
     end


fun acceptloop sock =
    (let val _ = print "listening\n"
        val (s, _) = (IO.Network.accept sock)
        val _ = addtosocks s
        val _ = print "accepted\n"
     in
         cmd[accept_p]
            {
              spawn[serve_p] { ret (inploop s) };
              do (acceptloop sock)
            }
    end)

main
{
  l <- spawn[accept_p] { do (acceptloop sock) };
  ret (print "spawned\n");
  spawn[stat_p] { do (statloop ()) };
  sync l
}
