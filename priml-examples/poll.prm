priority loop_p
priority sort_p
order sort_p < loop_p

fun[p] qsort s =
  if le (length s, 2) then
      cmd[p] { ret s }
  else
      let val pivot = sub(s, dv (length s, 2))
          val (sl, se, sr) = partition (s, (fn v => lt v pivot))
      in
          cmd[p]
             {
               quicksortl <- spawn[p] { [p]qsort sl };
               quicksortr <- spawn[p] { [p]qsort sr };
               ssl <- sync quicksortl;
               ssr <- sync quicksortr;
               ret (append (ssl, append (se, ssr)))
             }
      end


fun loop emails bgt : unit cmd[loop_p] =
  cmd[loop_p]
  {
    r <- poll bgt;
    x <- ret (case r of
               SOME l => display_ordered l
             | NONE => ());
    (* Handle events... *)
    loop emails bgt
  }

fun startloop emails : unit cmd[loop_p] =
  cmd[loop_p]
  {
    t <- spawn[sort_p] { [sort_p]qsort emails };
    loop emails t
  }

main
{
spawn[loop_p] { startloop nil }
}
